Backend implementation

- The overall test should go for 3 minutes
- The interval between 'tests' should be 1-4 seconds. This will be generated by a random decimal number between 1-4
- a 355ms threshold is used, anything outside this timeframe is deemed a 'lapse'
- an average is taken across all the tests
- times of less than 100ms are considered 'false starts' and should be excluded from average timeframe
- The performance score is calculated as 100% minus the number of lapses and false starts 
        relative to the number of valid stimuli and false starts. It ranges from 100% (optimal performance, no lapses or false starts) 
        to 0% (worst possible performance, only lapses and false starts)

UI implementation
- The UI should have a clear button to start the test, as well as a button to stop it (it can't be resumed though but it is better than an incomplete test)
- once the start button, (a green circle with the text 'START' inside it) is clicked, the circle will turn red and test test will begin
- Once the interval has passed and a response is required, the button will return to a green colour again and a stopwatch will appear on the button
- Once the button is clicked, the button will return to its red colour, the result will be added to an array and the most previous result will display a label underneath the test with the time of that particular 'test'
- This process repeats itself for the duration of the test
- at the end of a test, the duration, number of 'false starts', number of 'lapses', average response time, number of 'tests' 
        and performance score should be displayed in a tabular format, and data passed to the dashboard team